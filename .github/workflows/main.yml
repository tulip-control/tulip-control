---
# configuration for GitHub Actions
name: tulip tests
on:
    push:
    pull_request:
    schedule:
        # the start of every hour is
        # a high-load time for GitHub Actions
        # <https://docs.github.com/en/actions/reference/
        #     events-that-trigger-workflows#scheduled-events>
        - cron: '37 5 5 * *'
jobs:
    build:
        name: Build
        runs-on: ubuntu-22.04
        strategy:
            matrix:
                python-version: [
                    '3.10',
                    '3.11',
                    '3.12',
                    ]
        steps:
            - uses: actions/checkout@v4
            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ matrix.python-version }}
            - name: Define CI directory
              run: |
                echo "CI_DIR=.github/workflows" >> $GITHUB_ENV
            - name: Setup testing environment
              run: |
                ./$CI_DIR/setup_basic_testing.sh
            - name: Run "base" tests
              run: |
                set -o posix
                echo "Exported environment variables:"
                export -p
                ./run_tests.py --outofsource base
            - name: Prepare for "hybrid" tests
              run: |
                ./$CI_DIR/setup_hybrid_testing.sh
            - name: Run "hybrid" tests
              run: |
                set -o posix
                echo "Exported environment variables:"
                export -p
                ./run_tests.py \
                    --outofsource \
                    --fast hybrid
            - name: Prepare for "full" tests
              if: endsWith(github.ref, '_fast_ci') == false
              run: |
                ./$CI_DIR/setup_full_testing.sh
            - name: Run "full" tests
              if: endsWith(github.ref, '_fast_ci') == false
              run: |
                set -o posix
                echo "Exported environment variables:"
                export -p
                # run all tests, including
                # slow hybrid tests, and
                # alternative game solvers
                ./run_tests.py --outofsource full
    static_analysis:
        name: Static analysis of Python code
        runs-on: ubuntu-22.04
        continue-on-error: true
        strategy:
            matrix:
                python-version: [
                    '3.10',
                    ]
        steps:
            - uses: actions/checkout@v4
            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ matrix.python-version }}
            - name: Install dependencies from PyPI
              run: |
                pip install \
                    --ignore-installed \
                    --upgrade \
                        pip \
                        setuptools \
                        wheel
            - name: Create sdist for `tulip`
              run: |
                python setup.py sdist
            - name: Install only `tulip` dependencies
              run: |
                pip install dist/tulip-*.tar.gz
                pip uninstall --yes tulip
            - name: Install analysis tools
              run: |
                pip install \
                    --upgrade \
                        pytype
            - name: Statically analyze `tulip`
              run: |
                pytype --tree tulip
                pytype --unresolved tulip
                pytype \
                    -v 1 \
                    -k \
                    -j 'auto' \
                        tulip \
                        setup.py \
                        run_tests.py \
                    -x tulip/interfaces/stormpy.py
    docs:
        name: Build documentation
        runs-on: ubuntu-22.04
        if: github.ref == 'refs/heads/main'
        strategy:
            matrix:
                python-version: ['3.10']
        steps:
            - uses: actions/checkout@v4
            - name: Install `apt` packages
              run: |
                sudo apt update
                sudo apt install \
                    dvipng \
                    texlive-latex-extra \
            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ matrix.python-version }}
            - name: Install dependencies from PyPI
              run: |
                pip install -U pip setuptools sphinx gitpython
                pip install .
            - name: Build
              run: |
                cd doc
                BIN_BRANCH="docs_bin"
                git fetch origin $BIN_BRANCH
                git restore --source=origin/$BIN_BRANCH '*.png'
                make html
            - name: Push built documentation to `git` branch
              run: |
                DOCS_BRANCH="docs_pages"
                DOCS_BUILD_ROOT="doc/_build/html"
                git config --global user.name 'GitHub Actions'
                git config --global user.email '<>'
                git fetch origin $DOCS_BRANCH
                git checkout -b $DOCS_BRANCH
                git status
                git clone --filter=blob:none --no-checkout https://github.com/tulip-control/tulip-control.git temporary
                cd temporary
                THIS_COMMIT=`git log --pretty=%H -1 origin/main -- doc tulip examples`
                cd ..
                echo $THIS_COMMIT > COMMIT
                git add COMMIT
                mkdir docs
                touch docs/.nojekyll
                cp -R $DOCS_BUILD_ROOT/. docs/
                git add -f docs
                git commit -m 'BIN: built documentation files

                committed by GitHub Actions.'
                # detect changes to the built documentation
                git diff --exit-code --quiet $DOCS_BRANCH \
                    origin/$DOCS_BRANCH -- COMMIT \
                    || ret=$?
                if [[ "${ret}" -eq 1 ]]; then
                    echo 'The built documentation changed, \
                        will now push changes.'
                    git push -f origin $DOCS_BRANCH;
                else
                    echo 'The built documentation did not change.
                        No git pushing to do.'
                fi
